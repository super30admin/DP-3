Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:


Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.
Example 2:


Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100

-------------------------------------------------

Solution 1 - DP - TC - O(m * n) SC - O(1)

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        
        if(matrix == null || m == 0)
            return 0;
        
        for(int i = m - 2; i >= 0; i--)
        {
            for(int j = 0; j < n; j++)
            {
                if(j == 0)
                {
                    matrix[i][j] += Math.min(matrix[i + 1][j], matrix[i + 1][j + 1]);
                }
                else if(j == n - 1)
                {
                    matrix[i][j] += Math.min(matrix[i + 1][j], matrix[i + 1][j - 1]);
                }
                else
                {
                    matrix[i][j] += Math.min(matrix[i + 1][j], Math.min(matrix[i + 1][j + 1], matrix[i + 1][j - 1])); 
                }
            }
        }
        
        int min = Integer.MAX_VALUE;
        
        for(int j = 0; j < n; j++)
        {
            min = Math.min(min, matrix[0][j]);
        }
        
        return min;
    }
}
