Time complexity: O(nm)
Space complexity: O(1)
Did this code submitted successfully on leetcode: Yes

class Solution {
    public int minFallingPathSum(int[][] A) {
        
        if(A.length==0 || A==null)
            return 0;
        
        int n=A.length;
        int m=A[0].length;
        int min=Integer.MAX_VALUE;
        
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                
                //begin
                if(j==0)
                   A[i][j] = A[i][j] + Math.min(A[i-1][j],A[i-1][j+1]); 
                //end
                else if(j==m-1)
                   A[i][j] = A[i][j] + Math.min(A[i-1][j],A[i-1][j-1]);  
                //middle
                else
                    A[i][j] = A[i][j] + Math.min(A[i-1][j],Math.min(A[i-1][j-1],A[i-1][j+1]));
            }
        }
        
        //calculating the min at last row
        for(int j=0;j<m;j++){
            if(A[n-1][j]<min)
                min=A[n-1][j];
        }
        
        return min;
        
    }
}
