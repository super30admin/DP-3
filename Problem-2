//Time:  O(m*n) m is no of elements in row, n is no of elements in inside array
//space : O(1) used same matrix array
class Solution {
    public int minFallingPathSum(int[][] A) {
       for(int i=1;i<A.length;i++)
       {
           for(int j=0;j<A[0].length;j++)
           {
           //if elemnt is at 0 column then choose min from 0th and 1st column 
               if(j==0)
                 A[i][j]=  A[i][j]+Math.min(A[i-1][j],A[i-1][j+1]);
                 // if elemnt is at last column then choose min from last and prev column 
               else if(j==A[0].length-1)
                   A[i][j]=  A[i][j]+Math.min(A[i-1][j-1],A[i-1][j]);    
                   // else choose 3 columns has differnce atmost 1 ie jth column and 1 prev and 1 next column from j
               else
                    A[i][j]=  A[i][j]+Math.min(A[i-1][j],Math.min(A[i-1][j-1],A[i-1][j+1]));
           }
       }
        //Check to print matrix
      // for(int i=0;i<A.length;i++)
      //  {
      //      for(int j=0;j<A[0].length;j++)
      //      {
      //        System.out.println("matrix " +A[i][j]) ; 
      //      }
      // }
    int min=Integer.MAX_VALUE;
    //find min value from last row in the matrix is our answer
    for(int i=0;i<A[A.length-1].length;i++)
                                              {
                                                  if(min>(A[A.length-1][i]))
                                                      min=A[A.length-1][i];
                                              }
                                           
                       
                                                 return min;                        
    }
}
