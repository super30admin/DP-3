// Time Complexity : O(n^2)
// Space Complexity : O(n^2)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : None


// Your code here along with comments explaining your approach

approach: at each point in the dp array except the first row, the minimum value to get to that point is
 arr[i][j] + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]). If those indices don't exist we put infinity for those values.
 dp[i - 1][j] will always exist since we have begun the rows from index 1.


class Solution:
    def minFallingPathSum(self, A: List[List[int]]) -> int:
        dp = [[0 for i in range(len(A[0]))] for _ in range(len(A))]

        for i in range(len(A[0])):
            dp[0][i] = A[0][i]


        for i in range(1, len(A)):
            for j in range(len(A[0])):
                left = dp[i - 1][j - 1] if j > 0 else float('inf')
                right = dp[i - 1][j + 1] if j < len(A[0]) - 1 else float('inf')
                dp[i][j] = A[i][j] + min(left, dp[i - 1][j], right)

        return min(dp[len(A) - 1])