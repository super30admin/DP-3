// Time Complexity : O(n^2)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No
// Your code here along with comments explaining your approach
/*
1. for each value after 1st row, we want it to be the smallest value possible.
2. We would have to look at the neighbors above and detertmine which number when added to current element would give me minimum. 
3. from row > 0 at position j we would check j-1, j and j+1 th element in i-1th row and take minimum of above three.
*/
class Solution {
    public int minFallingPathSum(int[][] A) {
        if(A == null)
            return 0;
        
        for(int i=1; i< A.length ; i++){
            for(int j=0; j< A[0].length ; j++){
                if(j==0)
                    A[i][j] += Math.min( A[i-1][j], A[i-1][j+1]);
                else if(j==A[0].length-1)
                    A[i][j] += Math.min( A[i-1][j], A[i-1][j-1]); 
                else
                    A[i][j] += Math.min(A[i-1][j+1], 
                                        Math.min(A[i-1][j], A[i-1][j-1])); 
            }
        }
        int min = Integer.MAX_VALUE;
        //take minimum value of last row
        for(int j=0; j< A[0].length ; j++)
            min = Math.min(min , A[A.length-1][j]);
        
        return min;
    }
}
